                .include "zeropage.inc65"
                .include "display.inc65"
                .include "util.inc65"
                .include "io.inc65"
                .include "text.inc65"

                .setcpu "6502"

                .export _init
                .export _exit


                .segment "VECTORS"
                .addr nmi
                .addr _init
                .addr irq

                .code

nmi:            rti

irq:                    
                pha
                txa
                pha
                tya
                pha

                clc
                cld
                clv
                jsr irq_reset       ; Mark interrupt as read
                
                pla
                tay
                pla
                tax
                pla

                rti

_init:
                sei                
                clc
                cld
                clv
                ldx #$ff
                txs

                jsr io_init
                jsr ssd1305_init
                jsr text_init

                jsr led_off

wait_buttons:
                jsr serial_init

@wait_key:
                jsr serial_getc_nowait
                cpx #1
                beq @handle_command

                jsr read_buttons        
                pha
                and #16
                beq @load_hop
                pla
                and #32
                beq @info
                jmp @wait_key

@load_hop:
                jmp @load


@info:
                jsr clear

                lda #<info_1
                sta ptr1
                lda #>info_1
                sta ptr1+1

                lda #0
                sta text_row
                sta text_col

                jsr draw_string_internal

                lda #<info_2
                sta ptr1
                lda #>info_2
                sta ptr1+1

                lda #2
                sta text_row

                jsr draw_string_internal

                jsr display

@wait_key_down_info:
                jsr read_buttons
                and #16
                bne @wait_key_down_info

@wait_key_up_info:
                jsr read_buttons
                and #16
                beq @wait_key_up_info

                jsr splash

                jmp @wait_key

@handle_command:
                cmp #'S'
                beq @flash_system_hop

                cmp #'V'
                beq @return_version

                cmp #'P'
                beq @return_product

                cmp #'G'
                beq @copy_game

                jmp @wait_key

@flash_system_hop:
                jmp flash_system

@return_version:
                jsr led_on
                lda #<version
                ldx #>version
                jsr serial_put_string
                jsr led_off
                jmp @wait_key

@return_product:
                jsr led_on
                lda #<product
                ldx #>product
                jsr serial_put_string
                jsr led_off
                jmp @wait_key

@copy_game:
                jsr led_off

                jsr clear

                lda #<flashing
                sta ptr1
                lda #>flashing
                sta ptr1+1

                lda #0
                sta text_row
                sta text_col

                jsr draw_string_internal

                lda #<game
                sta ptr1
                lda #>game
                sta ptr1+1

                lda #3
                sta text_row

                jsr draw_string_internal

                jsr display

                jsr serial_ack
                jsr serial_copy
                jsr led_on
                jsr flash_game
                jsr serial_ack
                jsr led_off

@load:
                jsr clear

                lda #<loading
                sta ptr1
                lda #>loading
                sta ptr1+1

                lda #3
                sta text_row
                lda #5
                sta text_col

                jsr draw_string_internal

                jsr display

                jsr load_game

                jsr $5900

_exit:
                jmp _init          

flash_system:
                jsr clear

                lda #<flashing
                sta ptr1
                lda #>flashing
                sta ptr1+1

                lda #0
                sta text_row
                sta text_col

                jsr draw_string_internal

                lda #<system
                sta ptr1
                lda #>system
                sta ptr1+1

                lda #3
                sta text_row

                jsr draw_string_internal

                jsr display

                ; copy flash_binary to $7C00

                lda #<flash_binary
                sta ptr1
                lda #>flash_binary
                sta ptr1+1

                lda #$00
                sta ptr2
                lda #$7C
                sta ptr2+1

                ldy #0
                ldx #3
@loop:
                lda (ptr1), y
                sta (ptr2), y
                iny
                bne @loop

                dex
                beq @done

                inc ptr1+1
                inc ptr2+1
                
                jmp @loop

@done:
                jmp $7C00

flash_binary:   .incbin "flash/flash"
flashing:       .byte "Flashing...", $0
loading:        .byte "Loading...", $0
game:           .byte "Game", $0
system:         .byte "System", $0
info_1:         .byte "Version: 1.1.0_b3", $0
.if .defined(KITA)
info_2:         .byte "Product: Kit", $0
.elseif .defined(KITB)
info_2:         .byte "Product: Kit(B)", $0
.else
.error "Must define KITA or KITB"
.endif
version:        .byte "1.1.0", $0
.if .defined(KITA)
product:        .byte "kit", $0
.elseif .defined(KITB)
product:        .byte "kitb", $0
.else
.error "Must define KITA or KITB"
.endif
